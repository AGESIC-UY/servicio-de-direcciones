{
	"info": {
		"_postman_id": "08f50f0e-df7e-4c5e-b934-ec71c17bb401",
		"name": "Andrés Test Localidades",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "L1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ac8da7c-9fbe-4e46-ab7d-3bab45b115b8",
						"exec": [
							"var responseTextPre=pm.environment.get('responseText');",
							"var responseJsonPre=pm.environment.get('responseJson');",
							"var largoSV=Object.keys(responseJsonPre).length;//cantidad resultados sistema viejo",
							"console.log(\"En Test \");// + responseTextPre);",
							"console.log(\"Cantidad de elementos retornados en el sistema viejos es \" + largoSV );// + responseTextPre);",
							" pm.test(\"Body is correct\", function () {",
							"    //console.log('La respuesta obtenida es ' + pm.response.text());",
							"    var responseJsonTest = pm.response.json();",
							"    console.log(\"En Test respuesta obtenida \" + responseJsonTest);",
							"    console.log(\"En Test respuesta obtenida en Pre \" + responseJsonPre);",
							"    ",
							"    //json.forEach(function(responseJsonTest) { console.log('hola ' + JSON.stringify(responseJsonTest)); });",
							"    //la idea es contar cuantos elementos hay en uno u otro, el nuevo tiene que tener por",
							"    //lo menos la misma cantidad de elementos que el viejo, ya demás manejar un porcentaje de elementos que deben coincidir en el nuvo y el viejo, para eso comparar con nombre de localidades.",
							"   ",
							"    var largoSN=Object.keys(responseJsonTest).length;//cantidad resultados sistema nuevo",
							"   ",
							"    console.log('El servicio viejo retorna ' + largoSV + ' elementos ' + ' el servicio actual retorna ' +  largoSN + 'elementos');",
							"    var coincidencias=0;",
							"    for(var i = 0; i < responseJsonTest.length; i++) {",
							"        var obj = responseJsonTest[i];",
							"        pm.expect(pm.response.text()).to.include(obj.nombre);",
							"        //console.log('hola ' + obj.nombre);",
							"    }",
							"     ",
							"    //pm.response.to.have.body(responseTextPre);",
							"    ",
							"    ",
							"    pm.test(\"Response time is less than 200ms\", function () {",
							"        pm.expect(pm.response.responseTime).to.be.below(200);",
							"    });",
							"    ",
							"    ",
							"});",
							"",
							"",
							"/*",
							"Response handling",
							"Check if response body contains a string",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");",
							"});",
							"Check if response body is equal to a string",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"response_body_string\");",
							"});",
							"Check for a JSON value",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.value).to.eql(100);",
							"});",
							"",
							"Assertion library examples",
							"Following is a list of some of the most common assertion tests used in the Postman test scripts.",
							"",
							"Note that this list is not exhaustive. For the complete reference, see the documentation at: ChaiJS expect BDD library",
							"",
							"Assert if substring exists in target",
							"  pm.test(\"Check if pattern is in target string\",function () {",
							"      pm.expect('foobar').to.have.string('bar');",
							"  });",
							"Strict Comparison",
							"  const TEN = 10;",
							"  pm.test('Check if number is equal to 10', function () {",
							"      pm.expect(TEN).to.equal(10);",
							"  });",
							"Loose comparison",
							"  pm.test(\"Our JSON is loosely equal to the provided JSON\", function () {",
							"   pm.expect(data1).to.deep.equal(data2);",
							"  });",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "28ff991d-f925-452a-9ff5-5dbca5116e83",
						"exec": [
							" //var res1=postman.setNextRequest(\"SugerenciaLocalidades\");",
							" //console.log(res1);",
							" ",
							" ",
							"  //obtenfo los parametros de la url",
							"    //pm.request.url.getQueryString()",
							"    console.log(request);",
							"    const paramsString = request.url.split('?')[1];",
							"    const eachParamArray = paramsString.split('&');",
							"    let params = {};",
							"    eachParamArray.forEach((param) => {",
							"        const key = param.split('=')[0];",
							"        const value = param.split('=')[1];",
							"        Object.assign(params, {[key]: value});",
							"    });",
							"    console.log(params);",
							"    console.log(params.alias);",
							"    //const para=params;",
							" ",
							" ",
							" //Request al servicio viejo",
							" const echoPostRequest = {",
							" /* url: 'https://servicios.ide.gub.uy/servicios/localidades.ctr?departamento=${para.departamento}&alias=${params.alias}',*/",
							"  url: 'https://servicios.ide.gub.uy/servicios/localidades.ctr?departamento='+ params.departamento +'&alias='+params.alias,",
							"  method: 'GET'",
							"  //,  header:       'Authorization: Basic *Basic Authentication string*'",
							"",
							"};",
							"",
							"/*var getToken = true;",
							"",
							"if (!pm.environment.get('token'))",
							"",
							"{",
							"    console.log('Token  missing')",
							"",
							"}",
							"else ",
							"{",
							"",
							"    console.log('Token all good');",
							"}*/",
							"",
							"//if (getToken === true) {",
							"   ",
							"    ",
							"    ",
							"    pm.sendRequest(echoPostRequest, function (err, res) {",
							"    console.log(err ? err : res.json());",
							"        if (err === null) {",
							"            console.log('En Pre Se invocó el servicio');",
							"            //console.log(\"el resuiltado es \" + res);",
							"            //pm.environment.set('req_body', JSON.stringify(body));",
							"            var responseJson = res.json();",
							"            var responseString = JSON.stringify(responseJson);",
							"            console.log(\"En Pre La respuesta es \" + responseString);",
							"            //pm.globals.get(\"variable_key\");",
							"            pm.environment.set('responseText', responseString)",
							"            pm.environment.set('responseJson', responseJson)",
							"",
							"        }",
							"    });",
							"//}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://callejerouy-direcciones.agesic.gub.uy/api/v0/geocode/localidades?alias=true&departamento=florida",
					"protocol": "https",
					"host": [
						"callejerouy-direcciones",
						"agesic",
						"gub",
						"uy"
					],
					"path": [
						"api",
						"v0",
						"geocode",
						"localidades"
					],
					"query": [
						{
							"key": "alias",
							"value": "true"
						},
						{
							"key": "departamento",
							"value": "florida"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}